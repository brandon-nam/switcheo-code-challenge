syntax = "proto3";

package ledger.ledger;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "ledger/ledger/params.proto";
import "ledger/ledger/ledger.proto";

option go_package = "ledger/x/ledger/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ledger/ledger/params";
  
  }
  
  // Queries a list of ShowLedger items.
  rpc ShowLedger (QueryShowLedgerRequest) returns (QueryShowLedgerResponse) {
    option (google.api.http).get = "/ledger/ledger/show_ledger/{id}";
  
  }
  
  // Queries a list of ListLedger items.
  rpc ListLedger (QueryListLedgerRequest) returns (QueryListLedgerResponse) {
    option (google.api.http).get = "/ledger/ledger/list_ledger";
  
  }
  
  // Queries a list of ListLedgersCostFilter items.
  rpc ListLedgersCostFilter (QueryListLedgersCostFilterRequest) returns (QueryListLedgersCostFilterResponse) {
    option (google.api.http).get = "/ledger/ledger/list_ledgers_cost_filter/{minCost}/{maxCost}";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryShowLedgerRequest {
  uint64 id = 1;
}

message QueryShowLedgerResponse {
  Ledger ledger = 1 [(gogoproto.nullable) = false];
}

message QueryListLedgerRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryListLedgerResponse {
  repeated Ledger                                 ledger     = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryListLedgersCostFilterRequest {
  uint64                                minCost    = 1;
  uint64                                maxCost    = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryListLedgersCostFilterResponse {
  repeated Ledger                                 ledger     = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

